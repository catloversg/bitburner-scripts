import { NS } from "@ns";

declare global {
    // eslint-disable-next-line no-var, @typescript-eslint/no-explicit-any
    var webpackRequire: any;
    // eslint-disable-next-line no-var, @typescript-eslint/no-explicit-any
    var webpackChunkbitburner: any;
}

let ns: NS;
let doc: Document;

function unclickable() {
    const unclickableDiv = doc.querySelector<HTMLDivElement>("#unclickable")!;
    unclickableDiv.style.display = "block";
    unclickableDiv.style.visibility = "visible";
    unclickableDiv.style.backgroundColor = "red";
    unclickableDiv.addEventListener("click", () => {
        unclickableDiv.style.display = "none";
        unclickableDiv.style.visibility = "hidden";
    });
}

function undocumented() {
    // @ts-expect-error exploit
    ns.exploit();
}

function rainbow() {
    // @ts-expect-error exploit
    ns.rainbow("noodles");
}

function bypass() {
    // @ts-expect-error exploit
    ns.bypass(doc);
}

function alterReality() {
    // Use browser developer tools to edit source code or value of variable x
}

function prototypeTampering() {
    const originalFunction = Number.prototype.toExponential;
    Number.prototype.toExponential = function (fractionDigits?: number) {
        return originalFunction.apply(this, [fractionDigits]) + " ";
    };
}

function timeCompression() {
    const originalFunction = window.setTimeout;
    window.setTimeout = function (handler: TimerHandler, timeout?: number | undefined, ...args: unknown[]): number {
        if (timeout === 15000) {
            timeout = 250;
        }
        return originalFunction.apply(this, [handler, timeout, ...args]);
    };
}

function trueRecursion() {
    // Make sure you have SF1, then go to Arcade, it will load https://bitburner-official.github.io/bitburner-legacy/
    // Open Developer tools and change line in bundle.js:
    // From: parent.postMessage(__WEBPACK_IMPORTED_MODULE_22__Player_js__["a"].sourceFiles.length > 0, "*")
    // To: parent.postMessage(true, "*")
    // Alternative ways: anything that make Legacy version thinks that you have at least 1 SF. Eg: destroy BN1, edit
    // save file, ...
}

function exposeWebpackRequire() {
    if (!globalThis.webpackRequire) {
        globalThis.webpackChunkbitburner.push(
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            [[-1], {}, (webpackRequire: any) => globalThis.webpackRequire = webpackRequire]
        );
    }
}

function checkIfFunctionCodeIncludesSpecificString(object: unknown, specificString: string): boolean {
    return !!object && typeof object === "function" && !Object.hasOwn(object, "toString")
        && String(object).includes(specificString);
}

export function exposeGameInternalObjects() {
    if (!globalThis.webpackChunkbitburner) {
        return;
    }
    exposeWebpackRequire();
    let SaveObjectModule;
    let AllServersModule;
    for (const moduleId of Object.keys(webpackRequire.m)) {
        const module = webpackRequire(moduleId);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        for (const object of Object.values(module) as any) {
            if (!object) {
                continue;
            }
            if (object.bitNodeN) {
                globalThis.Player = object;
            }
            if (object.load && object.start && object.updateGame) {
                globalThis.Engine = object;
            }
            // saveObject in src\SaveObject.ts
            if (object.getSaveData) {
                SaveObjectModule = module;
            }
            // AddToAllServers function in src\Server\AllServers.ts
            if (checkIfFunctionCodeIncludesSpecificString(object, "Error: Trying to add a server with an existing IP")) {
                AllServersModule = module;
            }
        }
    }
    if (!globalThis.Player) {
        throw new Error("Cannot expose Player");
    }
    if (!globalThis.Engine) {
        throw new Error("Cannot expose Engine");
    }
    if (!SaveObjectModule) {
        throw new Error("Cannot expose SaveObject");
    }
    globalThis.SaveObject = {
        saveObject: {
            getSaveData: async () => ""
        },
        loadGame: async () => true
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    for (const object of Object.values(SaveObjectModule) as any) {
        if (object.getSaveData) {
            globalThis.SaveObject.saveObject = object;
        }
        if (checkIfFunctionCodeIncludesSpecificString(object, "Could not load Staneks Gift from save")) {
            globalThis.SaveObject.loadGame = object;
        }
    }
    if (!AllServersModule) {
        throw new Error("Cannot expose AllServers");
    }
    globalThis.AllServers = {
        loadAllServers: () => { },
        saveAllServers: () => ""
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    for (const object of Object.values(AllServersModule) as any) {
        if (checkIfFunctionCodeIncludesSpecificString(object, "JSON.parse")) {
            globalThis.AllServers.loadAllServers = object;
        }
        if (checkIfFunctionCodeIncludesSpecificString(object, "JSON.stringify")) {
            globalThis.AllServers.saveAllServers = object;
        }
    }
}

export function openDevMenu() {
    if (!globalThis.webpackChunkbitburner) {
        return;
    }
    exposeWebpackRequire();
    for (const moduleId of Object.keys(webpackRequire.m)) {
        const module = webpackRequire(moduleId);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        for (const object of Object.values(module) as any) {
            if (object && (object.toPage)) {
                object.toPage("Dev");
                return;
            }
        }
    }
}

export function main(nsContext: NS): void {
    ns = nsContext;
    doc = eval("document");
    // unclickable();
    // undocumented();
    // rainbow();
    // bypass();
    // prototypeTampering();
    // timeCompression();
}
