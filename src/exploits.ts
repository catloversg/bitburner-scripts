/* eslint-disable no-var */
/* eslint-disable @typescript-eslint/no-explicit-any */

export type SaveData = string | Uint8Array;

declare global {
    var webpackRequire: any;
    var webpackChunkbitburner: any;
    // var Player: any;
    var Engine: {
        updateGame: (numCycles?: number) => void;
        load: (saveData: SaveData) => Promise<void>;
        start: () => void;
    };
    var SaveObject: {
        saveObject: {
            getSaveData: (forceExcludeRunningScripts: boolean, forceExcludeScripts: boolean) => Promise<SaveData>;
        };
        loadGame: (saveData: SaveData) => Promise<boolean>;
    };
    var AllServers: {
        GetServer: () => any;
        GetAllServers: () => any[];
        loadAllServers: (saveString: string) => void;
        saveAllServers: () => string;
    };
    var Factions: any;
    var Companies: any;
    var AllGangs: any;
    var StockMarket: any;
    var Reviver: any;
    var Settings: any;
    var GoAI: any;
    var openDevMenu: any;
    var RamCostConstants: any;
    var MathRound: any;
}

export async function main() {
    exposeGameInternalObjects();
    globalThis.openDevMenu = openDevMenu;
    // disableRAMCost();
}

function exposeWebpackRequire() {
    if (globalThis.webpackRequire) {
        return;
    }
    globalThis.webpackChunkbitburner.push([
        [-1],
        {},
        (webpackRequire: any) => (globalThis.webpackRequire = webpackRequire),
    ]);
}

function checkIfFunctionCodeIncludesSpecificString(object: unknown, specificString: string) {
    return (
        !!object &&
        typeof object === "function" &&
        !Object.hasOwn(object, "toString") &&
        String(object).includes(specificString)
    );
}

export function exposeGameInternalObjects(overrideUpdateRamUsed = false) {
    if (!globalThis.webpackChunkbitburner) {
        return;
    }
    exposeWebpackRequire();
    let SaveObjectModule = {};
    let AllServersModule = {};
    let FactionsModule = {};
    let CompaniesModule = {};
    let AllGangsModule = {};
    let StockMarketModule = {};
    for (const moduleId of Object.keys(webpackRequire.m)) {
        const module = webpackRequire(moduleId);
        if (!module) {
            continue;
        }
        const exportedValues: any = Object.values(module);
        for (const value of exportedValues) {
            if (!value) {
                continue;
            }
            if (value.Base && value.Dom) {
                globalThis.RamCostConstants = value;
            }
            if (overrideUpdateRamUsed && value.fromJSONBase && value.toString().includes("v2.3FileChanges")) {
                value.prototype.updateRamUsed = () => {};
            }
            if (value.bitNodeN) {
                globalThis.Player = value;
            }
            if (value.load && value.start && value.updateGame) {
                globalThis.Engine = value;
            }
            if (value.importGame) {
                SaveObjectModule = module;
            }
            if (checkIfFunctionCodeIncludesSpecificString(value, "Error: Trying to add a server with an existing")) {
                AllServersModule = module;
            }
            if (checkIfFunctionCodeIncludesSpecificString(value, "Invalid faction in player save factions array")) {
                FactionsModule = module;
            }
            if (
                checkIfFunctionCodeIncludesSpecificString(value, "CompanyName") &&
                checkIfFunctionCodeIncludesSpecificString(value, "playerReputation") &&
                exportedValues.length === 3
            ) {
                CompaniesModule = module;
            }
            if (checkIfFunctionCodeIncludesSpecificString(value, "Cannot load data of AllGangs")) {
                AllGangsModule = module;
            }
            if (checkIfFunctionCodeIncludesSpecificString(value, "Cannot load data of StockMarket")) {
                StockMarketModule = module;
            }
            if (checkIfFunctionCodeIncludesSpecificString(value, "Could not locate constructor named")) {
                globalThis.Reviver = value;
            }
            if (value.AutosaveInterval) {
                globalThis.Settings = value;
            }
            if (checkIfFunctionCodeIncludesSpecificString(value, "Invalid AI move attempted")) {
                globalThis.GoAI = module;
            }
        }
    }

    if (!globalThis.Player) {
        console.error("Cannot expose Player");
    }
    if (!globalThis.Engine) {
        console.error("Cannot expose Engine");
    }

    globalThis.SaveObject = {} as any;
    for (const value of Object.values(SaveObjectModule) as any) {
        if (value.importGame) {
            globalThis.SaveObject.saveObject = value;
        }
        if (checkIfFunctionCodeIncludesSpecificString(value, "Could not load Aliases from save")) {
            globalThis.SaveObject.loadGame = value;
        }
    }
    if (!globalThis.SaveObject.saveObject) {
        console.error("Cannot expose SaveObjectModule");
    }

    globalThis.AllServers = {} as any;
    for (const value of Object.values(AllServersModule) as any) {
        if (checkIfFunctionCodeIncludesSpecificString(value, "Object.hasOwn")) {
            globalThis.AllServers.GetServer = value;
        }
        if (
            checkIfFunctionCodeIncludesSpecificString(value, "Object.keys") &&
            checkIfFunctionCodeIncludesSpecificString(value, ".push")
        ) {
            globalThis.AllServers.GetAllServers = value;
        }
        if (checkIfFunctionCodeIncludesSpecificString(value, "JSON.parse")) {
            globalThis.AllServers.loadAllServers = value;
        }
        if (checkIfFunctionCodeIncludesSpecificString(value, "JSON.stringify")) {
            globalThis.AllServers.saveAllServers = value;
        }
    }
    if (!globalThis.AllServers.GetServer) {
        console.error("Cannot expose AllServersModule");
    }

    for (const value of Object.values(FactionsModule)) {
        if (typeof value === "object") {
            globalThis.Factions = value;
            break;
        }
    }
    if (!globalThis.Factions) {
        console.error("Cannot expose Factions");
    }

    for (const value of Object.values(CompaniesModule)) {
        if (typeof value === "object") {
            globalThis.Companies = value;
            break;
        }
    }
    if (!globalThis.Companies) {
        console.error("Cannot expose Companies");
    }

    for (const value of Object.values(AllGangsModule)) {
        if (typeof value === "object") {
            globalThis.AllGangs = value;
            break;
        }
    }
    if (!globalThis.AllGangs) {
        console.error("Cannot expose AllGangs");
    }

    for (const value of Object.values(StockMarketModule) as any) {
        if (value.Orders) {
            globalThis.StockMarket = value;
            break;
        }
    }
    if (!globalThis.StockMarket) {
        console.error("Cannot expose StockMarket");
    }

    if (!globalThis.Reviver) {
        console.error("Cannot expose Reviver");
    }

    if (!globalThis.Settings) {
        console.error("Cannot expose Settings");
    }

    if (!globalThis.GoAI) {
        console.error("Cannot expose GoAI");
    }
}

function openDevMenu() {
    if (!globalThis.webpackChunkbitburner) {
        return;
    }
    exposeWebpackRequire();
    for (const moduleId of Object.keys(webpackRequire.m)) {
        const module = webpackRequire(moduleId);
        for (const value of Object.values(module) as any) {
            if (value && value.toPage) {
                value.toPage("Dev");
                return;
            }
        }
    }
}

function disableRAMCost() {
    exposeGameInternalObjects(true);
    RamCostConstants.Max = RamCostConstants.Base = Number.MIN_VALUE;
    if (!globalThis.MathRound) {
        globalThis.MathRound = Math.round;
        Math.round = (value) => {
            if (value === RamCostConstants.Max * 100) {
                return value;
            }
            return globalThis.MathRound(value);
        };
    }
    for (const server of AllServers.GetAllServers()) {
        server.ramUsed = 0;
    }
}
