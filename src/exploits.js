/* eslint-disable @typescript-eslint/no-unused-vars */

/** @param {NS} ns */
export async function main(ns) {
  ns.ramOverride(1.6);
  exposeInternalGameObjects();
  globalThis.openDevMenu = openDevMenu;
  // disableRAMCost();
  // setInfilGameId();
}
function exposeWebpackRequire() {
  if (globalThis.webpackRequire) {
    return;
  }
  globalThis.webpackChunkbitburner.push([[-1], {}, (webpackRequire) => (globalThis.webpackRequire = webpackRequire)]);
}
function checkIfFunctionCodeIncludesSpecificString(object, specificString) {
  return (
    !!object &&
    typeof object === "function" &&
    !Object.hasOwn(object, "toString") &&
    String(object).includes(specificString)
  );
}
export function exposeInternalGameObjects(overrideUpdateRamUsed = false) {
  if (!globalThis.webpackChunkbitburner) {
    return;
  }
  exposeWebpackRequire();
  let SaveObjectModule = {};
  let AllServersModule = {};
  let FactionsModule = {};
  let CompaniesModule = {};
  let AllGangsModule = {};
  let StockMarketModule = {};
  for (const moduleId of Object.keys(globalThis.webpackRequire.m)) {
    const module = globalThis.webpackRequire(moduleId);
    if (!module) {
      continue;
    }
    const exportedValues = Object.values(module);
    for (const value of exportedValues) {
      if (!value) {
        continue;
      }
      if (value.Base && value.Dom) {
        globalThis.RamCostConstants = value;
      }
      if (overrideUpdateRamUsed && value.fromJSONBase && value.toString().includes("v2.3FileChanges")) {
        value.prototype.updateRamUsed = () => {};
      }
      if (value.bitNodeN) {
        globalThis.Player = value;
      }
      if (value.load && value.start && value.updateGame) {
        globalThis.Engine = value;
      }
      if (value.importGame) {
        SaveObjectModule = module;
      }
      if (checkIfFunctionCodeIncludesSpecificString(value, "Error: Trying to add a server with an existing")) {
        AllServersModule = module;
      }
      if (checkIfFunctionCodeIncludesSpecificString(value, "Invalid faction in player save factions array")) {
        FactionsModule = module;
      }
      if (
        checkIfFunctionCodeIncludesSpecificString(value, "CompanyName") &&
        checkIfFunctionCodeIncludesSpecificString(value, "playerReputation") &&
        exportedValues.length === 3
      ) {
        CompaniesModule = module;
      }
      if (checkIfFunctionCodeIncludesSpecificString(value, "Cannot load data of AllGangs")) {
        AllGangsModule = module;
      }
      if (checkIfFunctionCodeIncludesSpecificString(value, "Cannot load data of StockMarket")) {
        StockMarketModule = module;
      }
      if (checkIfFunctionCodeIncludesSpecificString(value, "Could not locate constructor named")) {
        globalThis.Reviver = value;
      }
      if (value.AutosaveInterval) {
        globalThis.Settings = value;
      }
      if (checkIfFunctionCodeIncludesSpecificString(value, "Invalid AI move attempted")) {
        globalThis.GoAI = module;
      }
      if (
        checkIfFunctionCodeIncludesSpecificString(value, "RemoteFileApiAddress") &&
        !checkIfFunctionCodeIncludesSpecificString(value, "These settings control the Remote API for Bitburner")
      ) {
        globalThis.RemoteFileAPI = module;
      }
      if (Array.isArray(value) && value.length === 55 && value[0].name === "AeroCorp") {
        globalThis.LocationsMetadata = value;
      }
      if (checkIfFunctionCodeIncludesSpecificString(value, "Its enhancements will not take effect")) {
        globalThis.FactionHelpers = module;
      }
      if (value.lastChangeTimestamp != null && value.lastChangeTimestamp !== 0) {
        globalThis.InfiltrationState = value;
      }
    }
  }
  if (!globalThis.Player) {
    console.error("Cannot expose Player");
  }
  if (!globalThis.Engine) {
    console.error("Cannot expose Engine");
  }
  globalThis.SaveObject = {};
  for (const value of Object.values(SaveObjectModule)) {
    if (value.importGame) {
      globalThis.SaveObject.saveObject = value;
    }
    if (checkIfFunctionCodeIncludesSpecificString(value, "Could not load Aliases from save")) {
      globalThis.SaveObject.loadGame = value;
    }
  }
  if (!globalThis.SaveObject.saveObject) {
    console.error("Cannot expose SaveObjectModule");
  }
  globalThis.AllServers = {};
  for (const value of Object.values(AllServersModule)) {
    if (checkIfFunctionCodeIncludesSpecificString(value, "Object.hasOwn")) {
      globalThis.AllServers.GetServer = value;
    }
    if (
      checkIfFunctionCodeIncludesSpecificString(value, "Object.keys") &&
      checkIfFunctionCodeIncludesSpecificString(value, ".push")
    ) {
      globalThis.AllServers.GetAllServers = value;
    }
    if (checkIfFunctionCodeIncludesSpecificString(value, "JSON.parse")) {
      globalThis.AllServers.loadAllServers = value;
    }
    if (checkIfFunctionCodeIncludesSpecificString(value, "JSON.stringify")) {
      globalThis.AllServers.saveAllServers = value;
    }
  }
  if (!globalThis.AllServers.GetServer) {
    console.error("Cannot expose AllServersModule");
  }
  for (const value of Object.values(FactionsModule)) {
    if (typeof value === "object") {
      globalThis.Factions = value;
      break;
    }
  }
  if (!globalThis.Factions) {
    console.error("Cannot expose Factions");
  }
  for (const value of Object.values(CompaniesModule)) {
    if (typeof value === "object") {
      globalThis.Companies = value;
      break;
    }
  }
  if (!globalThis.Companies) {
    console.error("Cannot expose Companies");
  }
  for (const value of Object.values(AllGangsModule)) {
    if (typeof value === "object") {
      globalThis.AllGangs = value;
      break;
    }
  }
  if (!globalThis.AllGangs) {
    console.error("Cannot expose AllGangs");
  }
  for (const value of Object.values(StockMarketModule)) {
    if (value.Orders) {
      globalThis.StockMarket = value;
      break;
    }
  }
  if (!globalThis.StockMarket) {
    console.error("Cannot expose StockMarket");
  }
  if (!globalThis.Reviver) {
    console.error("Cannot expose Reviver");
  }
  if (!globalThis.Settings) {
    console.error("Cannot expose Settings");
  }
  if (!globalThis.GoAI) {
    console.error("Cannot expose GoAI");
  }
  if (globalThis.RemoteFileAPI) {
    for (const value of Object.values(globalThis.RemoteFileAPI)) {
      if (checkIfFunctionCodeIncludesSpecificString(value, "readyState")) {
        globalThis.isRemoteFileApiConnectionLive = value;
      } else {
        globalThis.newRemoteFileApiConnection = value;
      }
    }
  }
  if (globalThis.FactionHelpers) {
    for (const value of Object.values(globalThis.FactionHelpers)) {
      if (checkIfFunctionCodeIncludesSpecificString(value, "factionRumors.delete")) {
        globalThis.joinFaction = value;
        break;
      }
    }
  }
}
function openDevMenu() {
  if (!globalThis.webpackChunkbitburner) {
    return;
  }
  exposeWebpackRequire();
  for (const moduleId of Object.keys(globalThis.webpackRequire.m)) {
    const module = globalThis.webpackRequire(moduleId);
    for (const value of Object.values(module)) {
      if (value && value.toPage) {
        value.toPage("Dev");
        return;
      }
    }
  }
}
function disableRAMCost() {
  exposeInternalGameObjects(true);
  globalThis.RamCostConstants.Max = globalThis.RamCostConstants.Base = Number.MIN_VALUE;
  if (!globalThis.MathRound) {
    globalThis.MathRound = Math.round;
    Math.round = (value) => {
      if (value === globalThis.RamCostConstants.Max * 100) {
        return value;
      }
      return globalThis.MathRound(value);
    };
  }
  for (const server of globalThis.AllServers.GetAllServers()) {
    server.ramUsed = 0;
  }
}
function randomInRange(min, max) {
  if (min > max) {
    throw new Error(`Min is greater than max. Min: ${min}. Max: ${max}.`);
  }
  return Math.random() * (max - min) + min;
}
function setInfilGameId() {
  if (globalThis.ReactUseState) {
    return;
  }
  // globalThis.gameId = 0;
  // eslint-disable-next-line no-undef
  globalThis.ReactUseState = React.useState;
  // eslint-disable-next-line no-undef
  React.useState = (initialState) => {
    if (!initialState || Object.keys(initialState).length !== 2 || !initialState.lastGames) {
      return globalThis.ReactUseState(initialState);
    }
    const id = globalThis.gameId ?? randomInRange(0, 7);
    initialState.id = id;
    const getterSetter = globalThis.ReactUseState(initialState);
    const setter = getterSetter[1];
    getterSetter[1] = (newValue) => {
      newValue.id = id;
      setter(newValue);
    };
    return getterSetter;
  };
}
